# WILD CARD OPERATORS : PATTERN RELATED QUESTIONS
-- LIKE  : IT IS A WILD CARD OPERATOR WHICH IS USED TO FILTER THE DATA BY PATTERN AND RETURN OUTPUT.
 -- NOT LIKE : OPPOSITE OF LIKE.
 
-- CONDITION     PATTERN
--  STARTSWITH      "A%"
--  ENDSWITH        "%A"
--  CONTAIN         "%A%"
--  LENGTH          "___"
--  STARTS%ENDSWITH  "A%A"

 USE BRILLICA;
 SELECT * FROM MARKSHEET;
 # WRITE A QUERY TO SHOW THE NAME OF STUDENTS WHOSE NAME STARTS WITH A.
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE STUDENTS_NAME LIKE "A%";
 # WRITE A QUERY TO SHOW THE NAME OF STUDENTS WHOSE NAME CONTAIN "V".
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE STUDENTS_NAME LIKE "%V%";
 # WRITE A QUERY TO SHOW THE NAME WHERE STUDENTS NAME STARTS WITH P AND ENDS WITH R.
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE STUDENTS_NAME LIKE "P%R";
 # SHOW THE NAME OF STUDENTS WHOSE ADDRESS LENGTH IS 5.
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE ADDRESS LIKE "_____";
 # SHOW THE NAME OF STUDENTS WHOSE NAME OF SECOND ALPHABET IS R.
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE STUDENTS_NAME LIKE "_R%";
 # SHOW THE NAME OF STUDENTS WHOSE LAST OF SECOND ALPHABET IS M.
 SELECT STUDENTS_NAME FROM MARKSHEET WHERE STUDENTS_NAME LIKE "%M_";
 
 SELECT * FROM COVID_DATA;
 # SHOW THE NAME OF COUNTRY WHOSE NAME OF LENGTH IS 5 AND STARTSWITH I.
 SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE COUNTRY LIKE "_____" AND COUNTRY LIKE "I%";
 # SHOW THE NAME OF COUNTRY WHOSE NAME STARTS WITH I OR R.
 SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE COUNTRY LIKE "I%" OR  COUNTRY LIKE "R%";
 # SHOW THE NAME OF COUNTRY WHOSE NAME CONTAIN Z.
 SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE COUNTRY LIKE "%Z%";
 # SHOW THE NAME OF COUNTRY WHOSE NAME CONTAINS TWO TIMES A.
 SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE LENGTH(COUNTRY)- LENGTH(REPLACE(UPPER(COUNTRY),"A",""))=2;
 SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE COUNTRY LIKE "%A%A%" AND COUNTRY NOT LIKE "%A%A%A%";
 
 # CONSTRAINTS : CONSTRAINTS ARE USED TO APPLY RULES AND RESTRICTIONS ON TABLE.
--  THERE ARE DIFFERENT TYPES OF CONSTRAINTS : 
--  1) UNIQUE : IT RESTRICTS THE DUPLICATE VALUE FROM TABLE.
--  2) NOT NULL : IT RESTRICTS THE NULL VALUE IN COLUMN.
--  3) DEFAULT : IT SETS DEFAULT VALUE WHEN NOT PASSING ANY ARGUMENT.
--  4) CHECK : IT APPLIES THE CONDITION ON COLUMN AND RESTRICTS VALUE WHICH IS AGAINST THE CONDITION.
--  5) ENUM : IT SETS LIMITED VALUE IN COLUMN AND RESTRICTS OTHER VALUES.
--  6) INDEX : IT IMPROVES THE SPPED OF DATA RETRIEVAL FROM TABLE BY USING INDEX.
--  7) PRIMARY KEY : IT IS A COMBINATION OF UNIQUE AND NOT NULL. IT CREATES LINK BETWEEN TWO TABLES.
--  8) FOREIGN KEY : IT DESTROYS THE LINK BETWEEN TWO TABLES. IT IS OPPOSITE OF PRIMARY KEY.

USE BRILLICA;
SHOW TABLES;
CREATE TABLE PASSENGER( 
ID INT UNIQUE NOT NULL,
PA_NAME CHAR(100) NOT NULL,
FROM_CITY CHAR(100) DEFAULT "NEW DELHI",
TO_CITY VARCHAR(100) DEFAULT "MUMBAI",
TICKET_PRICE FLOAT CHECK(TICKET_PRICE>5000));
SELECT * FROM PASSENGER;
INSERT INTO PASSENGER(ID, PA_NAME, FROM_CITY, TICKET_PRICE)
VALUES(1001, "PRERNA" , "NEW DELHI", 9000);
INSERT INTO PASSENGER VALUES(1002, " YASHI","MUMBAI", "NEW DELHI", 6000);
SET SQL_SAFE_UPDATES=0;
ALTER TABLE PASSENGER ADD COLUMN GENDER ENUM("MALE","FEMALE");
UPDATE PASSENGER SET GENDER="FEMALE" WHERE ID=1001;
UPDATE PASSENGER SET GENDER="FEMALE" WHERE ID=1002;
DROP TABLE PASSENGER;
CREATE TABLE SALES(
ID INT PRIMARY KEY AUTO_INCREMENT,
PERSON VARCHAR(200) NOT NULL,
AREA ENUM("EAST","WEST","NORTH","SOUTH"),
AMOUNT FLOAT);
INSERT INTO SALES
VALUES(100, "SAM", "WEST", 2400);
SELECT * FROM SALES;
INSERT INTO SALES(PERSON, AREA, AMOUNT)
 VALUES("WAQAR", "SOUTH", 2300),
 ("DAISY", "EAST" , 2200);
 SELECT * FROM SALES;
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # VARIABLE : IT IS A CONTAINER WHERE WE STORE THE DATA.
 SET @X = "BIHAR";
 SELECT * FROM MARKSHEET WHERE ADDRESS=@X;
 # show minimum marks from marksheet. 
 SET @M = (SELECT MIN(MARKS) FROM MARKSHEET);
 SELECT * FROM MARKSHEET WHERE MARKS=@M;
 
# Show the second maximum marks of students details. 
 SET @MAX_MARKS = (SELECT MAX(MARKS) FROM MARKSHEET);
 SET @SECOND = (SELECT MAX(MARKS) FROM MARKSHEET WHERE MARKS<@MAX_MARKS);
 SELECT * FROM MARKSHEET WHERE MARKS=@SECOND;
 
 SELECT * FROM MARKSHEET WHERE MARKS = (SELECT MAX(MARKS) FROM MARKSHEET WHERE MARKS< (SELECT MAX(MARKS) FROM MARKSHEET));
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
# COMMON TABLE EXPRESSION : 
-- IT IS USED TO SOLVE THE COMPLEX QUERY IN EASY MANNER.
-- IT IS A TEMPORARY NAMED RESULT SET THAT YOU CAN REFER TO WITHIN A SQL QUERY. THIS HELPS YOU BREAKDOWN COMPLEX QUERIES INTO SIMPLER, MANAGEABLE PARTS.

USE BRILLICA;
SELECT * FROM MARKSHEET;
SELECT ADDRESS, MAX(MARKS) AS M FROM MARKSHEET GROUP BY ADDRESS HAVING M<450;
WITH CTE_X AS (SELECT ADDRESS, MAX(MARKS) AS M FROM MARKSHEET GROUP BY ADDRESS) 
SELECT * FROM CTE_X WHERE M<450;

# Write a query to show the details with division of students, if marks is greater than 350, then first division, if marks is greater than 280, then second division
-- else show third division, Then Count total number of students by each division.

WITH X AS (
SELECT *, CASE WHEN MARKS>350 THEN "FIRST" WHEN MARKS>280 THEN "SECOND" ELSE "THIRD" END AS DIVISION FROM MARKSHEET)
SELECT DIVISION,COUNT(*) FROM X GROUP BY DIVISION;


# WRITE A QUERY TO SHOW THE SUM OF CONFIRMED CASE BY COUNTRY BY EACH COUNTRY AND IF COUNTRY OF CONFIRMED CASE IS GEATER THAN AVERAGE CONFIRMED CASE,
-- THEN SHOW DANGER ZONE ELSE SHOW SAFE ZONE. 
 
WITH CTE_X AS (
SELECT COUNTRY, SUM(CONFIRMED) AS CONFIRMED FROM COVID_DATA GROUP BY COUNTRY)
SELECT *, CASE WHEN CONFIRMED> (SELECT AVG(CONFIRMED) FROM CTE_X) THEN "dANGER ZONE" ELSE "SAFE ZONE" END AS ZONE FROM CTE_X;


# WRITE A QUERY TO SHOW THE DATA WHOSE MARKS IS GREATER THAN 300 AND ADDRESS IS BIHAR.
WITH CTE AS (
SELECT * FROM MARKSHEET WHERE ADDRESS="BIHAR")
SELECT * FROM CTE WHERE MARKS>400;


# WRITE A QUERY TO SHOW THE YEAR BY AVERAGE SALARY.
SELECT YEAR(DOJ), AVG(SALARY) AS SALARY FROM EMPLOYEES GROUP BY YEAR(DOJ); 

# WRITE A QUERY TO SHOW THE MAX CONFIRMED CASE BY QUARTER.
SELECT  QUARTER(DATE) AS QTR, MAX(CONFIRMED) AS MAX FROM COVID_DATA GROUP BY QTR;


