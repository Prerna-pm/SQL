USE BRILLICA;
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;
# JOINS : JOINS CLAUSE ARE USED TO COMBINE THE TWO TABLES BASED ON A SIMILAR COLUMN.
-- A JOIN CLAUSE IS USED TO COMBINE ROWS FROM TWO OR MORE TABLES, BASED ON A RELATED COLUMN BETWEEN THEM.

# TYPES OF JOIN
# INNER JOIN  : THE INNER JOIN KEYWORD SELECTS RECORDS THAT HAVE MATCHING VALUES IN BOTH TABLES. 
# LEFT JOIN : THE LEFT JOIN KEYWORD RETURNS ALL THE RECORDS FROM LEFT TABLE AND THE MATCHING RECORDS FROM THE RIGHT TABLE.
# RIGHT JOIN : THE RIGHT JOIN KEYWORD RETURNS ALL THE RECORDS FROM THE RIGHT TABLE AND THE MATCHING RECORDS FROM THE LEFT TABLE. ALSO KNOWN AS RIGHT OUTER JOIN.
# FULL JOIN : THE FULL OUTER JOIN KEYWORD RETURNS ALL RECORDS WHEN THERE IS A MATCH IN LEFT OR RIGHT TABLE RECORDS.
-- IT CAN BE CONSIDERED AS A COMBINATION OF LEFT JOIN AND RIGHT JOIN.
# SELF JOIN : AS INNER JOIN
# NATURAL JOIN : FULL JOIN

CREATE TABLE TABLE_1 ( NAME TEXT, 
						DEPARTMENT TEXT, 
						SALARY INT);
INSERT INTO TABLE_1 VALUES ("A", "IT", 500),
							("B","SALES",300),
                            ("C","DA",800),
                            ("D","BA",200);
CREATE TABLE TABLE_2 (NAME TEXT, AGE INT, CITY TEXT);
INSERT INTO TABLE_2 VALUES ("A", 45, "NOIDA"),
							("B", 25, "DELHI"),
                            ("M", 21, "UP"),
                            ("N", 18, "MP");
SELECT * FROM TABLE_1;
SELECT * FROM TABLE_2;
SELECT * FROM TABLE_1 AS T1 INNER JOIN TABLE_2 AS T2 ON T1.NAME=T2.NAME;
SELECT * FROM TABLE_1 AS T1 LEFT JOIN TABLE_2 AS T2 ON T1.NAME=T2.NAME;
SELECT * FROM TABLE_2 AS T1 RIGHT JOIN TABLE_2 AS T2 ON T1.NAME=T2.NAME;

SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS INNER JOIN CUSTOMERS ON ORDERS.CUSTOMERID=CUSTOMERS.CUSTOMERID;

SELECT * FROM COVID_DATA;
CREATE VIEW AB AS (
SELECT `WHO REGION`,SUM(CONFIRMED) AS JAN_CNF FROM COVID_DATA WHERE MONTHNAME(DATE)= "JANUARY"  GROUP BY `WHO REGION`);
CREATE VIEW AC AS(
SELECT `WHO REGION`, SUM(CONFIRMED) AS FEB_CNF FROM COVID_DATA WHERE MONTHNAME(DATE)="FEBRUARY" GROUP BY `WHO REGION`);
SELECT * FROM AB INNER JOIN AC ON AB.`WHO REGION`=AC.`WHO REGION`;

WITH T1 AS( 
SELECT `WHO REGION`, SUM(CONFIRMED) AS JAN_CNF FROM COVID_DATA WHERE MONTH(DATE)="1" GROUP BY `WHO REGION`),
T2 AS( 
SELECT `WHO REGION`, SUM(CONFIRMED) AS FEB_CNF FROM COVID_DATA WHERE MONTH(DATE)="2" GROUP BY `WHO REGION`)
SELECT T1.`WHO REGION`, JAN_CNF, FEB_CNF FROM T1 LEFT JOIN T2 ON T1.`WHO REGION`=T2.`WHO REGION`;

SELECT * FROM COVID_DATA;
WITH T1 AS(
SELECT `WHO REGION`, SUM(CONFIRMED) AS MAR_CNF FROM COVID_DATA WHERE MONTH(DATE)=3 GROUP BY `WHO REGION`),
T2 AS(
SELECT `WHO REGION`, SUM(CONFIRMED) AS APR_CNF FROM COVID_DATA WHERE MONTH(DATE)=4 GROUP BY `WHO REGION`),
T3 AS(
SELECT `WHO REGION`, SUM(CONFIRMED) AS MAY_CNF FROM COVID_DATA WHERE MONTH(DATE)=5 GROUP BY `WHO REGION`),
T4 AS(
SELECT `WHO REGION`, SUM(CONFIRMED) AS JUN_CNF FROM COVID_DATA WHERE MONTH(DATE)=6 GROUP BY `WHO REGION`)

SELECT T1.`WHO REGION`, MAR_CNF, APR_CNF, MAY_CNF FROM T1 INNER JOIN T2 ON 
	T1.`WHO REGION` = T2.`WHO REGION` INNER JOIN T3 ON T1.`WHO REGION`=T3.`WHO REGION`
    INNER JOIN T4 ON T1.`WHO REGION` = T4.`WHO REGION`;

# SHOW EMP_NAME AGE AND SALARY WHOSE SI_NO IS EVEN 
SELECT `SI NO`,EMP_NAME, AGE, SALARY FROM EMPLOYEES WHERE `SI NO`%2=0;
# SHOW NAME OF EMPLOYEE WHOSE NAME CONTAIN TWO TIMES "A"
SELECT * FROM EMPLOYEES WHERE LENGTH(EMP_NAME)- LENGTH(REPLACE(UPPER(EMP_NAME),"A",""))=2;
# SHOW THE OF EMPLOYEE WHOSE SALARY IS LESS THAN 50% 0F MAXIMUM SALARY
SELECT EMP_NAME FROM EMPLOYEES WHERE SALARY<0.5* (SELECT MAX(SALARY) FROM EMPLOYEES);
# SHOW THE MINIMUM AND MAXIMUM AGE OF DETAILS FROM EMP
SELECT * FROM EMPLOYEES WHERE AGE = (SELECT MAX(AGE) FROM EMPLOYEES) OR AGE = (SELECT MIN(AGE) FROM EMPLOYEES);
SET @MIN_AGE = (SELECT MIN(AGE) FROM EMPLOYEES);
SET @MAX_AGE = (SELECT MAX(aGE) FROM EMPLOYEES);
SELECT * FROM EMPLOYEES WHERE AGE IN (@MAX_AGE,@MIN_AGE);
------------------------------------------------------------------------------------------------------------------------------------
# UNION : IT COMBINES THE QUERY AND SHOWS THE UNIQUE VALUES. CONDITION : ALL COLUMNS SHOULD BE SAME.
# UNION ALL : IT COMBINES THE QUERY AND SHOWS ALL THE VALUES INCLUDING DUPLICATE. CONDITION : ALL COLUMNS SHOULD BE SAME.

(SELECT * FROM MARKSHEET WHERE ADDRESS="ASSAM" LIMIT 1)
UNION
(SELECT * FROM MARKSHEET WHERE ADDRESS="HARYANA" LIMIT 1);

SELECT ADDRESS FROM MARKSHEET
UNION ALL
SELECT ADDRESS FROM MARKSHEET;

# FULL JOIN / CROSS JOIN
SELECT * FROM EMPLOYEES FULL JOIN MARKSHEET;

# COMBINING TABLE WITHOUT JOINS.
SELECT * FROM TABLE_1 AS T, TABLE_2 AS T2 WHERE T.NAME=T2.NAME;
SELECT * FROM TABLE_1, TABLE_2;


SELECT * FROM IPL;
SELECT CONCAT(T1.TEAM,"  VS  ",T2.TEAM) AS MATCHES FROM IPL T1 INNER JOIN IPL AS T2 ON T1.ID>T2.ID;





