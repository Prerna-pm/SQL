# GROUPBY : GroupBy statement are used to group the same category of rows with the help of aggregate function.
USE BRILLICA;
SELECT * FROM EMP2;
# SHOW THE MAX SALARY IN HR DEPARTMENT.  -- FOR A SINGLE DEPT AGG FUNCTION IS APPLIED WITH WHERE CLAUSE.
SELECT MAX(SALARY) FROM EMP2 WHERE DEPARTMENT="HR";
# SHOW THE MAX SALARY IN EACH DEPARTMENT. -- FOR EACH DEPARTMENT, GROUP BY IS APPLIED.
SELECT DEPARTMENT,MAX(SALARY) AS MAX_SALARY FROM EMP2 GROUP BY DEPARTMENT;
# Count total number of employees in each department.
SELECT DEPARTMENT, COUNT(*) FROM EMP2 GROUP BY DEPARTMENT;
# SHOW THE AVERAGE SALARY OF EMPLOYEE IN EACH DEPARTMENT.
SELECT DEPARTMENT,AVG(SALARY) FROM EMP2 GROUP BY DEPARTMENT;
# SHOW THE SUM OF SALARY AND MAX AGE OF EMPLOYEE BY EACH DEPARTMENT.
SELECT DEPARTMENT,SUM(SALARY),MAX(AGE) FROM EMP GROUP BY DEPARTMENT;
SELECT * FROM EMP;
# SHOW THE MINIMUM AGE OF EMPLOYEE IN EACH CITY.
SELECT CITY,MIN(AGE) FROM EMP GROUP BY CITY;
SELECT * FROM MARKSHEET;
# Show the maximum marks of student by each department.
SELECT ADDRESS,MAX(MARKS) FROM MARKSHEET GROUP BY ADDRESS;
# Show the average marks of students by his gender.
SELECT GENDER,AVG(MARKS) FROM MARKSHEET GROUP BY GENDER;
# Count total students in each address.
SELECT ADDRESS,COUNT(*) AS TOTAL_STUDENTS FROM MARKSHEET GROUP BY ADDRESS;
# Show the average, min and max marks of students by each address.
SELECT ADDRESS, ROUND(AVG(MARKS),2) AS AVG_MARKS, MIN(MARKS) AS MIN_MARKS, MAX(MARKS) AS MAX_MARKS FROM MARKSHEET GROUP BY ADDRESS;
# SHOW THE MAX AGE OF EMPLOYEE BY HIS GENDER AND ADDRESS.
SELECT GENDER,ADDRESS,MAX(AGE) FROM MARKSHEET GROUP BY ADDRESS, GENDER;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# HAVING CLAUSE: HAVING CLAUSE ARE USED TO FILTER THE DATA FROM GROUPED TABLE AND IT WILL PERFORM AFTER GROUPBY.

SELECT DEPARTMENT, MAX(AGE) FROM EMP GROUP BY DEPARTMENT HAVING MAX(AGE)<=32;
SELECT * FROM COVID;
DROP TABLE COVID;
SELECT * FROM COVID_DATA;
ALTER TABLE COVID_DATA RENAME COLUMN `COUNTRY/REGION` TO COUNTRY;
SET SQL_SAFE_UPDATES=0;
UPDATE COVID_DATA SET CONFIRMED = `NEW CASES` + CONFIRMED;
ALTER TABLE COVID_DATA DROP COLUMN `NEW CASES`;
UPDATE COVID_DATA SET RECOVERED = RECOVERED + `NEW RECOVERED`;
ALTER TABLE COVID_DATA DROP COLUMN `NEW RECOVERED`;
UPDATE COVID_DATA SET DEATHS = DEATHS + `NEW DEATHS`;
ALTER TABLE COVID_DATA DROP COLUMN `NEW DEATHS`;
SELECT DISTINCT COUNTRY FROM COVID_DATA;
UPDATE COVID_DATA SET COUNTRY = REPLACE(COUNTRY,"*","");
# SHOW THE TOTAL DEATHS BY EACH COUNTRY.
SELECT COUNTRY, SUM(DEATHS) AS TOTAL_DEATHS FROM COVID_DATA GROUP BY COUNTRY;
# SHOW THE TOTAL DEATHS BY EACH COUNTRY WHERE DEATHS IS LESS THAN 500.
SELECT COUNTRY,SUM(DEATHS) FROM COVID_DATA GROUP BY COUNTRY HAVING SUM(DEATHS)<=500;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
USE BRILLICA;
# WRITE A QUERY TO SHOW THE BOTTOM 20 COUNTRY BY DEATHS.
SELECT COUNTRY, SUM(DEATHS) AS SND FROM COVID_DATA GROUP BY COUNTRY ORDER BY SND LIMIT 20;
# SHOW THE AVERAGE DEATHS BY EACH WHO REGION.
SELECT `WHO REGION`, AVG(DEATHS) FROM COVID_DATA GROUP BY `WHO REGION`;
# show the top 5 country base of active case.
SELECT COUNTRY, SUM(ACTIVE) AS SAC FROM COVID_DATA GROUP BY COUNTRY ORDER BY SAC DESC LIMIT 5;
# show the sum of confirmed case by month name.
SELECT MONTHNAME(DATE) AS MN,SUM(CONFIRMED) AS SCS FROM COVID_DATA group by MN;
# Show the maximum deaths by country whose who region is South east Asia.
SELECT COUNTRY, MAX(dEATHS) AS DEATHS FROM COVID_DATA WHERE `WHO REGION` ="SOUTH-EAST ASIA" GROUP BY COUNTRY ORDER BY DEATHS;
# SHOW THE TOP 5 COUNTRY BASED ON RECOVERED CASES.
SELECT COUNTRY, SUM(RECOVERED) AS SR FROM COVID_DATA GROUP BY COUNTRY ORDER BY SR DESC LIMIT 5;

-- ORDER OF EXECUTION : 
-- SELECT 
-- FROM 
-- WHERE 
-- GROUP BY
-- HAVING 
-- ORDER BY
-- LIMIT

# COUNT TOTAL NUMBER OF COUNTRY WHOSE NAME STATS WITH I.
SELECT COUNT(distinct COUNTRY) FROM COVID_DATA WHERE LEFT(COUNTRY,1)="I";
# COUNT TOTAL NUMBER OF COUNTRY WHOSE COUNTRY STARTS WITH P.
SELECT DISTINCT COUNTRY FROM COVID_DATA WHERE LEFT(COUNTRY,1)="P";
# COUNT TOTAL NUMBER OF ROWS BY EACH COUNTRY.
SELECT COUNTRY,COUNT(*) FROM COVID_DATA GROUP BY COUNTRY;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# VIEW : VIEW IS A VIRTUAL TABLE IN MYSQL WHICH IS USED TO CREATE A TEMPORARY TABLE IN DATABASE KNOWN AS A VIEW.
# WRITE A QUERY TO SHOW THE SUM OF CONFIRMED, ACTIVE, DEATHS, RECOVERED CASES AND GROUP BY COUNTRY AND WHO REGION.
CREATE VIEW COVID AS (
SELECT COUNTRY, `WHO REGION`,SUM(CONFIRMED) AS CONFIRMED, SUM(ACTIVE) AS ACTIVE, SUM(DEATHS) AS DEATHS, SUM(RECOVERED) AS RECOVERED FROM COVID_DATA
GROUP BY `WHO REGION`, COUNTRY);
SELECT * FROM COVID;

SELECT * FROM EMP;
CREATE VIEW IT AS (
SELECT * FROM EMP WHERE DEPARTMENT="IT");
SELECT * FROM IT;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# CASE : IT IS A CONDITIONAL FORMULA IN SQL WHICH IS USED TO PRINT THE STATEMENT ACCORDING TO THE CONDITION IN NEW COLUMN.

SELECT * FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE STATUS IF MARKS IS GREATER THAN 350, THEN SHOW "HIGH", ELSE SHOW "LOW".
SELECT *, CASE 
WHEN MARKS>350 THEN "HIGH" 
ELSE "LOW" END AS STATUS
FROM MARKSHEET;
SELECT *, IF(MARKS>350,"HIGH","LOW") AS STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE STATUS IF AGE IS LESS THAN 25, THEN SHOW JUNIOR ELSE SHOW SENIOR.
SELECT *, CASE WHEN AGE<25 THEN "JUNIOR" ELSE "SENIOR" END AS STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE STATUS IF NAME STARTS WITH "P", THEN SHOWYES ELSE SHOW NO.
SELECT *, CASE WHEN LEFT(STUDENTS_NAME,1)="P" THEN "YES" ELSE "NO" END AS STATUS FROM MARKSHEET;
SELECT *, IF(LEFT(STUDENTS_NAME,1)="P","YES","NO") FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE STATUS IF MARKS IS GREATER THAN 400, THEN SHOW "FIRST", IF MARKS IS GREATER THAN 300 THEN SHOW SECOND ELSE SHOW THIRD.
SELECT *, CASE WHEN MARKS>400 THEN "FIRST" WHEN MARKS>300 THEN "SECOND" ELSE "THIRD" END STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW STATUS IS ADDRESS IS DELHI OR BIHAR THEN GROUP 1, IF ADDRESS IS ASSAM OR HARYANA THEN GROUP 2, ELSE SHOW GROUP 3.
SELECT *, CASE WHEN ADDRESS="BIHAR" OR ADDRESS="DELHI" THEN "GROUP 1" 
WHEN ADDRESS IN ("HARYANA","ASSAM") THEN "GROUP 2"
ELSE "GROUP 3" END STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW IF MARKS IS GREATER THAN AVERAGE MARKS , THEN SHOW GOOD ELSE SHOW BAD.
SELECT *, CASE WHEN MARKS> (SELECT AVG(MARKS) FROM MARKSHEET) THEN "GOOD" ELSE "BAD" END STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE NAME OF STUDENTS AND MARKS IF GENDER IS GIRL AND MARKS IS LESS THAN 300, THEN SHOW FIRST,
# IF GENDER IS BOY AND MARKS IS GREATER THAN 300 THEN SHOW SECOND ELSE SHOW THIRD.
CREATE VIEW MARKS AS 
(SELECT STUDENTS_NAME, MARKS, CASE WHEN GENDER="GIRL" AND MARKS<300 THEN "FIRST"
WHEN GENDER="BOY" AND MARKS>300 THEN "SECOND" 
ELSE "THIRD" END STATUS FROM MARKSHEET);
SELECT STATUS,COUNT(*) AS TOTAL_STUDENTS FROM MARKS GROUP BY STATUS;
# WRITE A QUERY TO SHOW STUDENTS_NAME WITH STATUS IF NAME STARTS AND ENDS WITH "A", THEN SHOW "Y" ELSE SHOW "N".
SELECT STUDENTS_NAME, CASE WHEN LEFT(STUDENTS_NAME,1)="A" AND RIGHT(STUDENTS_NAME,1)="A" THEN "Y" ELSE "N" END STATUS FROM MARKSHEET;
# WRITE A QUERY TO SHOW THE TABLE IF MARKS IS GREATER THAN 400, THEN 1, IF MARKS GREATER THAN 350, THEN 2, 
# IF MARKS IS GREATER THAN 300, THEN 3 ELSE 4. 
SELECT *, IF(MARKS>400,"1",IF(MARKS>350,"2",IF(MARKS>300,"3","4"))) AS STATUS FROM MARKSHEET;








